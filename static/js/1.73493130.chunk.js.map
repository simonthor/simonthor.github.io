{"version":3,"sources":["components/collapsible.js","pages/tips.js"],"names":["Collapsible","props","Header","styled","div","state","open","header","e","this","setState","onClick","togglePanel","title","className","children","React","Component","Tips","Navigator","navWidgetNames","search","searchButton","season","subject","type","age","archive","refs","navWidgets","widgetName","createRef","sortedTips","tips","tip","criteria","includes","hasOwnProperty","parseInt","some","link","toLowerCase","optionSelector","widget","current","value","checked","chosenTips","forEach","conditionsFullFilled","push","placeholder","ref","getTips","htmlFor","name","min","max","map","key","links","style","marginRight","href","info"],"mappings":"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","file":"static/js/1.73493130.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport default class Collapsible extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        const Header = styled.div`\r\n            cursor: pointer;\r\n            border: solid 1px #f2f2f2;\r\n            padding: 15px;\r\n            background-color: #000f29;\r\n            color: #FFF;\r\n        `;\r\n        this.state = {\r\n            open: false,\r\n            header: Header\r\n        };\r\n    }\r\n\r\n    togglePanel(e){\r\n        this.setState({open: !this.state.open})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <this.state.header onClick={(e)=>this.togglePanel(e)}>\r\n                    {this.props.title}\r\n                </this.state.header>\r\n                {this.state.open ? (\r\n                <div className='content'>\r\n                    {this.props.children}\r\n                </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n/*\r\n        .header{\r\n        cursor: pointer;\r\n        border: solid 1px #f2f2f2;\r\n        padding: 15px;\r\n        background-color: #0089CC;\r\n        color: #FFF;\r\n        font-family: verdana;\r\n        }\r\n\r\n        .content{\r\n        cursor: pointer;\r\n        border-left: solid 1px #f2f2f2;\r\n        border-right: solid 1px #f2f2f2;\r\n        border-bottom: solid 1px #f2f2f2;\r\n        border-radius: 0 0 5px 5px;\r\n        padding: 15px;\r\n        font-family: verdana;\r\n        font-size: 14px;\r\n        }\r\n        */","import React from 'react';\r\nimport tips from '../data/tips.json';\r\nimport styled from 'styled-components';\r\nimport Collapsible from '../components/collapsible';\r\n\r\nexport default class Tips extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // TODO: Add expand/collapse all button\r\n        // TODO: improve appearance of buttons with CSS\r\n        const Navigator = styled.div`\r\n            display: grid;\r\n            width: 100%;\r\n            height: 3rem;\r\n            margin-bottom: 1rem;\r\n            grid-template-areas: \r\n            \"search search search search searchButton\"\r\n            \"season subject type age archive\"; {/*include separate academic and age bars?*/}\r\n        `;\r\n\r\n        const navWidgetNames = {\r\n            search: 'input', searchButton: 'button', season: 'select', subject: 'select',\r\n            type: 'select', age: 'div', archive: 'div'\r\n        };\r\n\r\n        let refs = {};\r\n        let navWidgets = {};\r\n        for (const widgetName in navWidgetNames) {\r\n            navWidgets[widgetName] = styled(navWidgetNames[widgetName])`grid-area: ${widgetName}`;\r\n            refs[widgetName] = React.createRef();\r\n        }\r\n\r\n        // Probably bad practice\r\n        this.state = {Navigator: Navigator, navWidgets: navWidgets, sortedTips:tips, refs:refs};\r\n\r\n    }\r\n\r\n    conditionsFullFilled(tip, criteria) {\r\n        if (!(tip['season'] === criteria['season'] || criteria['season'] === 'all')) {\r\n            return false;\r\n        }\r\n        else if (!(tip['type'].includes(criteria['type']) || criteria['type'] === 'all')) {\r\n            return false;\r\n        }\r\n        else if (!(tip['subject'] === criteria['subject'] || criteria['subject'] === 'all')) {\r\n            return false;\r\n        }\r\n        else if (!(!criteria['age'] || !tip['academic level'].hasOwnProperty('age') ||\r\n                        tip['academic level'].age.includes(parseInt(criteria['age'], 10)))) {\r\n            return false;\r\n        }\r\n        else if (!(tip['links'].some((link)=>(link.includes(criteria['search']))) ||\r\n            tip['name'].toLowerCase().includes(criteria['search'].toLowerCase()) ||\r\n            (tip['info'] !== null && tip['info'].toLowerCase().includes(tip['name'].toLowerCase())))) {\r\n            return false;\r\n        }\r\n        else return criteria['archive'] || !tip.hasOwnProperty('archive') || !tip['archive'];\r\n    }\r\n\r\n    getTips () {\r\n        // clean the criteria inputted by the user and create an object of it.\r\n        const criteria = {};\r\n        for (const optionSelector in this.state.refs) {\r\n            const widget = this.state.refs[optionSelector];\r\n            if (widget.current === null) {\r\n                criteria[optionSelector] = widget.value;\r\n            } else if (widget.current.type === 'checkbox') {\r\n                criteria[optionSelector] = widget.current.checked;\r\n            } else {\r\n                criteria[optionSelector] = widget.current.value;\r\n            }\r\n        }\r\n        // Create an array of the tips that match the criteria above.\r\n        // Uses the conditionsFulfilled function\r\n        let chosenTips = [];\r\n        tips.forEach(\r\n            (tip)=>{\r\n                if (this.conditionsFullFilled(tip, criteria)) {\r\n                    chosenTips.push(tip);\r\n                }\r\n            }\r\n        );\r\n        this.setState({sortedTips: chosenTips});\r\n    }\r\n\r\n    render () {\r\n        const navWidgets = this.state.navWidgets;\r\n        return (\r\n            <>\r\n                <h1>Tips and Links to STEM-related Activities</h1>\r\n                <this.state.Navigator>\r\n                    <navWidgets.search type=\"text\" placeholder=\"Enter some text...\" ref={this.state.refs.search}/>\r\n                    <navWidgets.searchButton onClick={()=>{this.getTips()}}>\r\n                        Search\r\n                    </navWidgets.searchButton>\r\n                    <navWidgets.season ref={this.state.refs.season}>\r\n                        <option value=\"all\">all</option>\r\n                        <option value=\"spring\">spring</option>\r\n                        <option value=\"summer\">summer</option>\r\n                        <option value=\"autumn\">autumn</option>\r\n                        <option value=\"winter\">winter</option>\r\n                    </navWidgets.season>\r\n                    <navWidgets.subject ref={this.state.refs.subject}>\r\n                        <option value=\"all\">all</option>\r\n                        <option value=\"physics\">physics</option>\r\n                        <option value=\"programming\">programming</option>\r\n                        <option value=\"astronomy\">astronomy</option>\r\n                        <option value=\"mathematics\">mathematics</option>\r\n                        <option value=\"biology\">biology</option>\r\n                        <option value=\"biology\">biology</option>\r\n                    </navWidgets.subject>\r\n                    <navWidgets.type ref={this.state.refs.type}>\r\n                        <option value=\"all\">all</option>\r\n                        <option value=\"camp\">camp</option>\r\n                        <option value=\"association\">association</option>\r\n                        <option value=\"competition\">competition</option>\r\n                        <option value=\"research\">research</option>\r\n                    </navWidgets.type>\r\n                    <navWidgets.age>\r\n                        <label htmlFor=\"age\">Age:</label>\r\n                        <input type=\"number\" name=\"age\" min=\"5\" max=\"30\" ref={this.state.refs.age}/>\r\n                    </navWidgets.age>\r\n                    <navWidgets.archive>\r\n                        <input type=\"checkbox\" name=\"archive\" ref={this.state.refs.archive}/>\r\n                        <label htmlFor=\"archive\">Include archive</label>\r\n                    </navWidgets.archive>\r\n                </this.state.Navigator>\r\n                {/*Renders all tips that has been sorted out using getTips.*/}\r\n                {this.state.sortedTips.map((tip)=>(\r\n                    <Collapsible title={tip.name} key={tip.name}>\r\n                        {tip.links.map((link)=>(<a style={{marginRight:'1rem'}} href={link} key={link}>Link</a>))}\r\n                        <p>{tip.info}</p>\r\n                    </Collapsible>\r\n                ))}\r\n            </>\r\n        );\r\n    }\r\n}"],"sourceRoot":""}