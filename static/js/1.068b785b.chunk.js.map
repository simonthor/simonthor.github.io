{"version":3,"sources":["components/collapsible.jsx","pages/tips.jsx"],"names":["Collapsible","props","Header","styled","div","state","open","header","e","this","setState","onClick","togglePanel","title","className","children","React","Component","Tips","Navigator","navWidgetNames","search","searchButton","season","subject","type","age","archive","navWidgets","widgetName","getTips","bind","getInputChange","event","target","id","checked","value","undefined","sortedTips","tips","criteria","chosenTips","forEach","tip","conditionsFullFilled","push","placeholder","onInput","onChange","htmlFor","name","min","max","map","key","links","link","style","marginRight","href","info","textAlign","fontSize","includes","hasOwnProperty","parseInt","some","toLowerCase"],"mappings":"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","file":"static/js/1.068b785b.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nexport default class Collapsible extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        const Header = styled.div`\r\n            cursor: pointer;\r\n            border: solid 1px #f2f2f2;\r\n            padding: 15px;\r\n            background-color: #000f29;\r\n            color: #FFF;\r\n        `;\r\n        this.state = {\r\n            open: false,\r\n            header: Header\r\n        };\r\n    }\r\n\r\n    togglePanel(e){\r\n        this.setState({open: !this.state.open})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <this.state.header onClick={(e)=>this.togglePanel(e)}>\r\n                    {this.props.title}\r\n                </this.state.header>\r\n                {this.state.open ? (\r\n                <div className='content'>\r\n                    {this.props.children}\r\n                </div>\r\n                ) : null}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n/*\r\n        .header{\r\n        cursor: pointer;\r\n        border: solid 1px #f2f2f2;\r\n        padding: 15px;\r\n        background-color: #0089CC;\r\n        color: #FFF;\r\n        font-family: verdana;\r\n        }\r\n\r\n        .content{\r\n        cursor: pointer;\r\n        border-left: solid 1px #f2f2f2;\r\n        border-right: solid 1px #f2f2f2;\r\n        border-bottom: solid 1px #f2f2f2;\r\n        border-radius: 0 0 5px 5px;\r\n        padding: 15px;\r\n        font-family: verdana;\r\n        font-size: 14px;\r\n        }\r\n        */","import React from 'react';\r\nimport tips from '../data/tips.json';\r\nimport styled from 'styled-components';\r\nimport Collapsible from '../components/collapsible';\r\n\r\nexport default class Tips extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        // TODO: Add expand/collapse all button\r\n        // TODO: improve appearance of buttons with CSS\r\n        const Navigator = styled.div`\r\n            display: grid;\r\n            width: 100%;\r\n            height: 3rem;\r\n            margin-bottom: 1rem;\r\n            grid-template-areas: \r\n            \"search search search search searchButton\"\r\n            \"season subject type age archive\"; {/*TODO: include separate academic and age bars?*/}\r\n        `;\r\n\r\n        const navWidgetNames = {\r\n            search: 'input', searchButton: 'button', season: 'select', subject: 'select',\r\n            type: 'select', age: 'div', archive: 'div'\r\n        };\r\n\r\n        let navWidgets = {};\r\n        for (const widgetName in navWidgetNames) {\r\n            navWidgets[widgetName] = styled(navWidgetNames[widgetName])`grid-area: ${widgetName}`;\r\n        }\r\n\r\n        this.getTips = this.getTips.bind(this);\r\n        this.getInputChange = (event) => {\r\n            if (event.target.type === 'checkbox') {\r\n                this.setState({[event.target.id]: event.target.checked})\r\n            }else {\r\n                this.setState({[event.target.id]: event.target.value})\r\n            }\r\n        };\r\n\r\n        this.Navigator = Navigator;\r\n        this.navWidgets = navWidgets;\r\n        this.state = {search: '', season: 'all', subject: 'all', type: 'all', age: undefined, archive: false, sortedTips: tips};\r\n    }\r\n\r\n    static conditionsFullFilled(tip, criteria) {\r\n        if (!(tip['season'] === criteria['season'] || criteria['season'] === 'all' || tip['season'] === 'all')) {\r\n            return false;\r\n        }\r\n        else if (!(tip['type'].includes(criteria['type']) || criteria['type'] === 'all')) {\r\n            return false;\r\n        }\r\n        else if (!(tip['subject'] === criteria['subject'] || criteria['subject'] === 'all')) {\r\n            return false;\r\n        }\r\n        else if (!(!criteria['age'] || !tip['academic level'].hasOwnProperty('age') ||\r\n                        tip['academic level'].age.includes(parseInt(criteria['age'], 10)))) {\r\n            return false;\r\n        }\r\n        else if (!(tip['links'].some((link)=>(link.includes(criteria['search']))) ||\r\n            tip['name'].toLowerCase().includes(criteria['search'].toLowerCase()) ||\r\n            (tip['info'] !== null && tip['info'].toLowerCase().includes(tip['name'].toLowerCase())))) {\r\n            return false;\r\n        }\r\n        else return criteria['archive'] || !tip.hasOwnProperty('archive') || !tip['archive'];\r\n    }\r\n\r\n    getTips () {\r\n        const {sortedTips, ...criteria} = this.state;\r\n\r\n        let chosenTips = [];\r\n        tips.forEach(\r\n            (tip)=>{\r\n                if (Tips.conditionsFullFilled(tip, criteria)) {\r\n                    chosenTips.push(tip);\r\n                }\r\n            }\r\n        );\r\n        this.setState({sortedTips: chosenTips});\r\n    }\r\n\r\n    render () {\r\n        const navWidgets = this.navWidgets;\r\n        return (\r\n            <>\r\n                <h1>Tips and Links to STEM-related Activities</h1>\r\n                <this.Navigator>\r\n                    <navWidgets.search type=\"text\" placeholder=\"Enter some text...\" id=\"search\" onInput={this.getInputChange}/>\r\n                    <navWidgets.searchButton onClick={this.getTips}>\r\n                        Search\r\n                    </navWidgets.searchButton>\r\n                    <navWidgets.season id=\"season\" onChange={this.getInputChange}>\r\n                        <option value=\"all\">all</option>\r\n                        <option value=\"spring\">spring</option>\r\n                        <option value=\"summer\">summer</option>\r\n                        <option value=\"autumn\">autumn</option>\r\n                        <option value=\"winter\">winter</option>\r\n                    </navWidgets.season>\r\n                    <navWidgets.subject id=\"subject\" onChange={this.getInputChange}>\r\n                        <option value=\"all\">all</option>\r\n                        <option value=\"physics\">physics</option>\r\n                        <option value=\"programming\">programming</option>\r\n                        <option value=\"astronomy\">astronomy</option>\r\n                        <option value=\"mathematics\">mathematics</option>\r\n                        <option value=\"biology\">biology</option>\r\n                        <option value=\"biology\">biology</option>\r\n                    </navWidgets.subject>\r\n                    <navWidgets.type id=\"type\" onChange={this.getInputChange}>\r\n                        <option value=\"all\">all</option>\r\n                        <option value=\"camp\">camp</option>\r\n                        <option value=\"association\">association</option>\r\n                        <option value=\"competition\">competition</option>\r\n                        <option value=\"research\">research</option>\r\n                    </navWidgets.type>\r\n                    <navWidgets.age>\r\n                        <label htmlFor=\"age\">Age:</label>\r\n                        <input type=\"number\" name=\"age\" min=\"5\" max=\"30\" id=\"age\" onChange={this.getInputChange}/>\r\n                    </navWidgets.age>\r\n                    <navWidgets.archive>\r\n                        <input type=\"checkbox\" name=\"archive\" id=\"archive\" onChange={this.getInputChange}/>\r\n                        <label htmlFor=\"archive\">Include archive</label>\r\n                    </navWidgets.archive>\r\n                </this.Navigator>\r\n                {/*Renders all tips that has been sorted out using getTips.*/}\r\n                {this.state.sortedTips.map((tip)=>(\r\n                    <Collapsible title={tip.name} key={tip.name}>\r\n                        {tip.links.map((link)=>(<a style={{marginRight:'1rem'}} href={link} key={link}>Link</a>))}\r\n                        <p>{tip.info}</p>\r\n                    </Collapsible>\r\n                ))}\r\n                <p style={{textAlign: 'center', fontSize: '0.7rem'}}>\r\n                    Disclaimer: While I do try to keep this site updated, the information here could still be outdated or incorrect.\r\n                </p>\r\n            </>\r\n        );\r\n    }\r\n}\r\n"],"sourceRoot":""}